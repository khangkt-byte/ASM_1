@model List<ASM_1.Models.Food.CartItem>
@using System.Text.Json
@using System.Text.Json.Serialization
@{
    ViewData["Title"] = "Thanh toán";
    var totalItems = Model?.Sum(x => x.Quantity) ?? 0;
    var subtotal = Model?.Sum(x => x.UnitPrice * x.Quantity) ?? 0;
    var tableCode = Context.Session.GetString("CurrentTableCode");
    var dynamicLabel = ViewBag.DynamicPricingLabel as string;
    var dynamicFactor = ViewBag.DynamicPriceFactor as decimal?;
    var lastDiscountCode = ViewBag.LastDiscountCode as string ?? string.Empty;
    var discountError = ViewBag.DiscountError as string;
    var cartPayload = Model?.Select(item => new
    {
        id = item.CartItemID,
        name = item.ProductName,
        quantity = item.Quantity,
        price = item.UnitPrice,
        options = item.Options == null
            ? Array.Empty<object>()
            : item.Options
                .Select(o => new { group = o.OptionTypeName, name = o.OptionName })
                .Cast<object>()
                .ToArray()
    }) ?? Array.Empty<object>();
    var cartItemsJson = JsonSerializer.Serialize(cartPayload, new JsonSerializerOptions
    {
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
        DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
    });
}
@section Styles {
    <link rel="stylesheet" href="~/css/pages/checkout.css" />
    <style>
        .split-options {
            display: flex;
            flex-wrap: wrap;
            gap: 12px;
            margin-bottom: 15px;
        }

        .split-option {
            flex: 1 1 220px;
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 10px;
            padding: 12px 16px;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            gap: 10px;
            align-items: center;
        }

            .split-option input {
                width: 20px;
                height: 20px;
            }

            .split-option.active,
            .split-option:hover {
                border-color: #0d6efd;
                background: #eef4ff;
                box-shadow: 0 0 0 2px rgba(13, 110, 253, 0.1);
            }

        .participant-row {
            display: grid;
            grid-template-columns: minmax(140px, 1fr) 120px 120px 40px;
            gap: 10px;
            margin-bottom: 10px;
            align-items: center;
        }

            .participant-row .participant-amount {
                font-weight: 600;
                color: #0d6efd;
                text-align: right;
            }

        .participant-row .btn-remove {
            color: #dc3545;
            border: none;
            background: transparent;
            font-size: 16px;
        }

        .item-assignment {
            border: 1px solid #e9ecef;
            border-radius: 10px;
            padding: 12px;
            background: #fdfdfd;
        }

        .item-assignment-row {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 15px;
            padding: 8px 0;
            border-bottom: 1px dashed #dee2e6;
        }

            .item-assignment-row:last-child {
                border-bottom: none;
            }

        .item-assignment-row .item-name {
            font-weight: 500;
            flex: 1 1 auto;
        }

        .split-summary {
            margin-top: 12px;
            border-top: 1px dashed #dee2e6;
            padding-top: 12px;
        }

        .invoice-details {
            margin-top: 15px;
            padding: 12px;
            border-radius: 10px;
            background: #f8f9fa;
        }

        @@media (max-width: 768px) {
            .participant-row {
                grid-template-columns: 1fr;
            }

                .participant-row .participant-amount {
                    text-align: left;
                }
        }
    </style>
}

<div class="checkout-page">
    <div class="container">
        <!-- Progress Steps -->
        <div class="checkout-progress">
            <div class="step completed">
                <div class="step-number">1</div>
                <span>Giỏ hàng</span>
            </div>
            <div class="step active">
                <div class="step-number">2</div>
                <span>Thông tin</span>
            </div>
            <div class="step">
                <div class="step-number">3</div>
                <span>Hoàn thành</span>
            </div>
        </div>

        @if (dynamicFactor.HasValue)
        {
            <div class="alert alert-info d-flex align-items-center gap-2">
                <i class="bi bi-lightning-charge-fill"></i>
                <span>
                    Giá động x@dynamicFactor.Value.ToString("0.##")
                    @if (!string.IsNullOrWhiteSpace(dynamicLabel))
                    {
                        @($"- {dynamicLabel}")
                    }
                </span>
            </div>
        }

        <div class="checkout-content">
            <!-- Customer Information -->
            <div class="checkout-main">
                <form id="checkoutForm" asp-controller="Cart" asp-action="PlaceOrder" asp-route-tableCode="@tableCode" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="splitMode" id="splitModeInput" value="single" />
                    <input type="hidden" name="splitPayload" id="splitPayloadInput" />

                    <div class="checkout-section">
                        <h2><i class="fas fa-users"></i> Chia hóa đơn</h2>

                        <div class="split-options" id="splitModeOptions">
                            <label class="split-option active">
                                <input type="radio" name="splitModeSelector" value="single" checked>
                                <div>
                                    <strong>Một người thanh toán</strong>
                                    <div>Người đại diện thanh toán toàn bộ hóa đơn</div>
                                </div>
                            </label>
                            <label class="split-option">
                                <input type="radio" name="splitModeSelector" value="equal">
                                <div>
                                    <strong>Chia đều bill</strong>
                                    <div>Mỗi người trả phần bằng nhau</div>
                                </div>
                            </label>
                            <label class="split-option">
                                <input type="radio" name="splitModeSelector" value="percentage">
                                <div>
                                    <strong>Chia theo %</strong>
                                    <div>Định phần trăm cho từng người</div>
                                </div>
                            </label>
                            <label class="split-option">
                                <input type="radio" name="splitModeSelector" value="items">
                                <div>
                                    <strong>Chia theo món</strong>
                                    <div>Ai gọi món nào trả món đó</div>
                                </div>
                            </label>
                        </div>

                        <div class="participant-controls mb-3">
                            <div id="participantList"></div>
                            <button type="button" class="btn btn-outline-primary btn-sm" id="addParticipantBtn">
                                <i class="fas fa-user-plus"></i> Thêm người cùng bàn
                            </button>
                        </div>

                        <div id="itemAssignment" class="item-assignment d-none"></div>

                        <div class="mb-3">
                            <label class="form-label" for="splitNoteInput">Ghi chú chia bill (tuỳ chọn)</label>
                            <textarea class="form-control" id="splitNoteInput" rows="2" placeholder="Ví dụ: Anh A trả giúp bàn"></textarea>
                        </div>

                        <div class="split-summary" id="splitSummary"></div>
                    </div>

                    <!-- Payment Method -->
                    <div class="checkout-section">
                        <h2><i class="fas fa-credit-card"></i> Phương thức thanh toán</h2>
                        <div class="payment-methods">
                            <label class="payment-method">
                                <input type="radio" name="paymentMethod" value="cash" checked>
                                <div class="payment-info">
                                    <div class="payment-icon">
                                        <i class="fas fa-money-bill-wave"></i>
                                    </div>
                                    <div class="payment-details">
                                        <strong>Tiền mặt tại quầy</strong>
                                        <span>Thanh toán trực tiếp với nhân viên</span>
                                    </div>
                                </div>
                            </label>
                            <label class="payment-method">
                                <input type="radio" name="paymentMethod" value="card">
                                <div class="payment-info">
                                    <div class="payment-icon">
                                        <i class="fas fa-credit-card"></i>
                                    </div>
                                    <div class="payment-details">
                                        <strong>Thanh toán bằng thẻ</strong>
                                        <span>Quẹt thẻ hoặc quét QR ngân hàng</span>
                                    </div>
                                </div>
                            </label>
                            <label class="payment-method">
                                <input type="radio" name="paymentMethod" value="momo">
                                <div class="payment-info">
                                    <div class="payment-icon">
                                        <img src="~/Images/momo-logo.jpg" alt="MoMo">
                                    </div>
                                    <div class="payment-details">
                                        <strong>Ví MoMo</strong>
                                        <span>Thanh toán nhanh qua ví điện tử</span>
                                    </div>
                                </div>
                            </label>
                        </div>
                    </div>

                    <!-- Split Options -->
                    <div class="checkout-section bill-split-section">
                        <h2><i class="fas fa-users"></i> Chia hoá đơn theo bàn</h2>
                        <p class="section-hint">Mọi người cùng bàn có thể chọn cách thanh toán phù hợp.</p>
                        <div class="split-modes" data-role="split-mode-list">
                            <label class="split-mode">
                                <input type="radio" name="splitMode" value="full" checked>
                                <span>
                                    <strong>Một người thanh toán</strong>
                                    <small>Toàn bộ hoá đơn do một người chi trả</small>
                                </span>
                            </label>
                            <label class="split-mode">
                                <input type="radio" name="splitMode" value="even">
                                <span>
                                    <strong>Chia đều hoá đơn</strong>
                                    <small>Mỗi người trả số tiền bằng nhau</small>
                                </span>
                            </label>
                            <label class="split-mode">
                                <input type="radio" name="splitMode" value="percentage">
                                <span>
                                    <strong>Chia theo phần trăm</strong>
                                    <small>Tự đặt tỷ lệ phần trăm cho từng người</small>
                                </span>
                            </label>
                            <label class="split-mode">
                                <input type="radio" name="splitMode" value="by-item">
                                <span>
                                    <strong>Ai gọi món nào trả món đó</strong>
                                    <small>Phân chia theo từng món cụ thể</small>
                                </span>
                            </label>
                        </div>

                        <div class="split-participants" data-role="participant-manager">
                            <div class="split-participant-list" data-role="participant-list"></div>
                            <button type="button" class="btn btn-outline-primary add-participant" data-action="add-participant">
                                <i class="fas fa-user-plus"></i> Thêm người tham gia
                            </button>
                        </div>

                        <div class="split-items" data-role="item-distribution" hidden>
                            <h3><i class="fas fa-utensils"></i> Phân bổ món ăn</h3>
                            <div class="table-responsive">
                                <table class="table table-sm table-bordered">
                                    <thead>
                                        <tr data-role="item-header-row"></tr>
                                    </thead>
                                    <tbody data-role="item-body"></tbody>
                                </table>
                            </div>
                            <p class="text-muted small mb-0">Chọn số lượng mỗi người thanh toán cho từng món. Phần chưa phân bổ sẽ được giao cho người được chọn trả phần còn lại.</p>
                        </div>

                        <input type="hidden" name="splitInfo" id="splitInfoInput" />
                    </div>

                    <div class="checkout-section">
                        <h2><i class="fas fa-file-invoice"></i> Thông tin hóa đơn</h2>
                        <div class="form-check form-switch mb-3">
                            <input class="form-check-input" type="checkbox" id="invoiceRequestToggle" name="invoiceRequest">
                            <label class="form-check-label" for="invoiceRequestToggle">Yêu cầu xuất hóa đơn VAT</label>
                        </div>
                        <div id="invoiceDetails" class="invoice-details d-none">
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label class="form-label">Tên công ty / người nhận hóa đơn</label>
                                    <input type="text" class="form-control" name="invoiceCompanyName" />
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Mã số thuế</label>
                                    <input type="text" class="form-control" name="invoiceTaxCode" />
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Email nhận hóa đơn</label>
                                    <input type="email" class="form-control" name="invoiceEmail" />
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Địa chỉ</label>
                                    <input type="text" class="form-control" name="invoiceAddress" />
                                </div>
                                <div class="col-12">
                                    <label class="form-label">Ghi chú cho hóa đơn</label>
                                    <textarea class="form-control" name="invoiceNote" rows="2" placeholder="Ví dụ: Xuất hóa đơn cho công ty..."></textarea>
                                </div>
                            </div>
                        </div>
                    </div>

                </form>
            </div>

            <!-- Order Summary -->
            <div class="checkout-sidebar">
                <div class="order-summary">
                    <h3>Đơn hàng của bạn</h3>
                    <div class="summary-items">
                        @if (Model != null && Model.Any())
                        {
                            @foreach (var item in Model)
                            {
                                <div class="summary-item">
                                    <img src="@Url.Content(item.ProductImage)" alt="@item.ProductName">
                                    <div class="item-info">
                                        <h4>@item.ProductName</h4>

                                        @if (item.Options != null && item.Options.Any())
                                        {
                                            <ul class="item-options">
                                                @foreach (var opt in item.Options)
                                                {
                                                    <li>@opt.OptionTypeName: <strong>@opt.OptionName</strong></li>
                                                }
                                            </ul>
                                        }

                                        @if (!string.IsNullOrEmpty(item.Note))
                                        {
                                            <div class="item-note">
                                                <em>Ghi chú: @item.Note</em>
                                            </div>
                                        }

                                        <span class="item-quantity">x@(item.Quantity)</span>
                                    </div>

                                    <span class="item-price">
                                        @((item.UnitPrice * item.Quantity).ToString("N0"))₫
                                    </span>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="empty-cart">Chưa có sản phẩm nào trong đơn hàng.</p>
                        }
                    </div>

                    <div class="summary-calculations">
                        <div class="discount-box mb-3">
                            <label class="form-label">Mã giảm giá</label>
                            <input type="text" class="form-control" name="discountCode" form="checkoutForm" value="@lastDiscountCode" placeholder="Nhập mã giảm giá" />
                            <div class="form-text">Mã giảm giá sẽ được áp dụng khi xác nhận thanh toán.</div>
                            @if (!string.IsNullOrWhiteSpace(discountError))
                            {
                                <div class="text-danger">@discountError</div>
                            }
                        </div>
                        <div class="calc-row">
                            <span>Tạm tính (@totalItems món):</span>
                            <span>@subtotal.ToString("N0")₫</span>
                        </div>
                        <div class="calc-row">
                            <span>Phí giao hàng:</span>
                            <span id="shippingFee">0₫</span>
                        </div>
                        <div class="calc-row total">
                            <span>Tổng cộng:</span>
                            <span id="totalAmount">@subtotal.ToString("N0")₫</span>
                        </div>
                    </div>

                    <div class="checkout-actions">
                        <a href="@Url.Action("Index", "Cart", new { tableCode = tableCode })" class="btn-back">
                            <i class="fas fa-arrow-left"></i> Quay lại giỏ hàng
                        </a>

                        <button type="submit" class="btn-place-order" form="checkoutForm">
                            <i class="fas fa-check"></i>
                            Thanh toán
                            <span class="order-total">@subtotal.ToString("N0")₫</span>
                        </button>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

@section Scripts {
    <script>
        (() => {
            const cartItems = @Html.Raw(cartItemsJson);
            const form = document.getElementById('checkoutForm');
            const splitInput = document.getElementById('splitInfoInput');
            const participantList = document.querySelector('[data-role="participant-list"]');
            const addButton = document.querySelector('[data-action="add-participant"]');
            const itemDistribution = document.querySelector('[data-role="item-distribution"]');
            const itemHeaderRow = document.querySelector('[data-role="item-header-row"]');
            const itemBody = document.querySelector('[data-role="item-body"]');

            function disableSubmitButton() {
                const btn = document.querySelector('.btn-place-order');
                if (btn) {
                    btn.disabled = true;
                    btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang xử lý...';
                }
            }

            if (!form || !participantList || !splitInput || !addButton || !itemDistribution || !itemHeaderRow || !itemBody) {
                if (form) {
                    form.addEventListener('submit', disableSubmitButton);
                }
                return;
            }

            const state = {
                mode: 'full',
                participants: [],
                remainingPayerId: null
            };

            let participantCounter = 1;
            let currentDefaultMethod = getDefaultPaymentMethod();

            function getDefaultPaymentMethod() {
                const selected = document.querySelector('input[name="paymentMethod"]:checked');
                return selected ? selected.value : 'cash';
            }

            function createParticipant() {
                return {
                    id: `guest-${participantCounter++}`,
                    name: '',
                    method: currentDefaultMethod,
                    percentage: 0,
                    paysRemaining: false,
                    items: {}
                };
            }

            function ensureParticipants() {
                if (state.participants.length === 0) {
                    state.participants.push(createParticipant());
                }

                if (state.mode === 'full' && state.participants.length > 1) {
                    state.participants = [state.participants[0]];
                }

                if (state.mode === 'full') {
                    state.participants[0].paysRemaining = true;
                    state.remainingPayerId = state.participants[0].id;
                } else if (state.mode !== 'by-item') {
                    state.remainingPayerId = null;
                    state.participants.forEach(p => p.paysRemaining = false);
                } else {
                    if (!state.remainingPayerId || !state.participants.some(p => p.id === state.remainingPayerId)) {
                        state.remainingPayerId = state.participants[0]?.id ?? null;
                    }
                    state.participants.forEach(p => {
                        p.paysRemaining = p.id === state.remainingPayerId;
                        if (!p.items) {
                            p.items = {};
                        }
                    });
                }

                if (state.mode === 'percentage') {
                    normalizePercentages();
                } else {
                    state.participants.forEach(p => {
                        p.percentage = state.mode === 'full' ? 100 : 0;
                    });
                }
            }

            function normalizePercentages() {
                const count = state.participants.length;
                if (count === 0) {
                    return;
                }

                let remaining = 100;
                state.participants.forEach((p, index) => {
                    if (index === count - 1) {
                        p.percentage = Math.max(0, Math.round(remaining * 100) / 100);
                    } else {
                        const share = Math.round((100 / count) * 100) / 100;
                        p.percentage = share;
                        remaining -= share;
                    }
                });
            }

            function addParticipant() {
                const participant = createParticipant();
                if (state.mode === 'by-item' && state.participants.length === 0) {
                    participant.paysRemaining = true;
                    state.remainingPayerId = participant.id;
                }
                state.participants.push(participant);
                if (state.mode === 'percentage') {
                    normalizePercentages();
                }
                renderParticipants();
            }

            function removeParticipant(id) {
                state.participants = state.participants.filter(p => p.id !== id);
                if (state.mode === 'by-item' && state.remainingPayerId === id) {
                    state.remainingPayerId = state.participants[0]?.id ?? null;
                }
                ensureParticipants();
                renderParticipants();
            }

            function escapeHtml(value) {
                return String(value ?? '').replace(/[&<>"']/g, ch => ({
                    '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;'
                })[ch] || ch);
            }

            function renderParticipants() {
                ensureParticipants();
                participantList.innerHTML = '';
                const showPercentage = state.mode === 'percentage';
                const showRemaining = state.mode === 'by-item';
                const canRemove = state.mode !== 'full';

                state.participants.forEach(participant => {
                    const card = document.createElement('div');
                    card.className = 'participant-card';
                    const nameFieldId = `participant-name-${participant.id}`;
                    const methodFieldId = `participant-method-${participant.id}`;

                    card.innerHTML = `
                        <div class="participant-main">
                            <div class="row g-2 align-items-end">
                                <div class="col-sm-4">
                                    <label class="form-label" for="${nameFieldId}">Tên hiển thị</label>
                                    <input type="text" class="form-control" id="${nameFieldId}" value="${participant.name ?? ''}" placeholder="Ví dụ: Anh A">
                                </div>
                                <div class="col-sm-4">
                                    <label class="form-label" for="${methodFieldId}">Phương thức</label>
                                    <select class="form-select" id="${methodFieldId}">
                                        <option value="cash">Tiền mặt</option>
                                        <option value="card">Thẻ</option>
                                        <option value="momo">MoMo</option>
                                    </select>
                                </div>
                                ${showPercentage ? `<div class="col-sm-3">
                                    <label class="form-label">Tỷ lệ (%)</label>
                                    <input type="number" class="form-control" min="0" max="100" step="1" value="${participant.percentage ?? 0}" data-role="percentage-input">
                                </div>` : ''}
                                <div class="col-sm-1 d-flex justify-content-end">
                                    ${canRemove && state.participants.length > 1 ? `<button type="button" class="btn btn-link text-danger p-0" data-role="remove-participant" title="Xoá">
                                        <i class="fas fa-times"></i>
                                    </button>` : ''}
                                </div>
                            </div>
                        </div>
                        ${showRemaining ? `<div class="participant-extra">
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="remainingPayer" value="${participant.id}" ${participant.paysRemaining ? 'checked' : ''}>
                                <label class="form-check-label">Trả phần còn lại</label>
                            </div>
                        </div>` : ''}
                    `;

                    const nameInput = card.querySelector(`#${nameFieldId}`);
                    const methodSelect = card.querySelector(`#${methodFieldId}`);
                    if (nameInput) {
                        nameInput.addEventListener('input', () => {
                            participant.name = nameInput.value;
                            updateHiddenInput();
                        });
                    }
                    if (methodSelect) {
                        methodSelect.value = participant.method ?? currentDefaultMethod;
                        methodSelect.addEventListener('change', () => {
                            participant.method = methodSelect.value;
                            updateHiddenInput();
                        });
                    }
                    const percentageInput = card.querySelector('[data-role="percentage-input"]');
                    if (percentageInput) {
                        percentageInput.addEventListener('input', () => {
                            const value = Number.parseFloat(percentageInput.value);
                            participant.percentage = Number.isFinite(value) ? value : 0;
                            updateHiddenInput();
                        });
                    }
                    const removeBtn = card.querySelector('[data-role="remove-participant"]');
                    if (removeBtn) {
                        removeBtn.addEventListener('click', () => removeParticipant(participant.id));
                    }
                    const remainingRadio = card.querySelector('input[name="remainingPayer"]');
                    if (remainingRadio) {
                        remainingRadio.addEventListener('change', () => {
                            state.remainingPayerId = participant.id;
                            state.participants.forEach(p => p.paysRemaining = p.id === participant.id);
                            updateHiddenInput();
                        });
                    }

                    participantList.appendChild(card);
                });

                addButton.disabled = state.mode === 'full' && state.participants.length >= 1;
                renderItemDistribution();
                updateHiddenInput();
            }

            function renderItemDistribution() {
                if (state.mode !== 'by-item' || state.participants.length === 0) {
                    itemDistribution.hidden = true;
                    itemHeaderRow.innerHTML = '';
                    itemBody.innerHTML = '';
                    return;
                }

                itemDistribution.hidden = false;
                itemHeaderRow.innerHTML = '<th>Món</th><th>Số lượng</th>' + state.participants.map(p => `<th>${escapeHtml(p.name || 'Khách')}</th>`).join('');
                itemBody.innerHTML = '';

                cartItems.forEach(item => {
                    const row = document.createElement('tr');
                    const infoCell = document.createElement('td');
                    infoCell.innerHTML = `<div class="split-item-name">${escapeHtml(item.name)}</div>${Array.isArray(item.options) && item.options.length ? `<div class="split-item-options text-muted">${item.options.map(o => `${escapeHtml(o.group)}: ${escapeHtml(o.name)}`).join('<br>')}</div>` : ''}`;
                    row.appendChild(infoCell);

                    const qtyCell = document.createElement('td');
                    qtyCell.textContent = item.quantity;
                    row.appendChild(qtyCell);

                    state.participants.forEach(participant => {
                        if (!participant.items) {
                            participant.items = {};
                        }
                        const cell = document.createElement('td');
                        const input = document.createElement('input');
                        input.type = 'number';
                        input.min = '0';
                        input.max = String(item.quantity);
                        input.step = '1';
                        input.value = participant.items[item.id] ?? 0;
                        input.className = 'form-control form-control-sm';
                        input.addEventListener('input', () => {
                            const value = Number.parseInt(input.value, 10);
                            if (Number.isFinite(value) && value > 0) {
                                participant.items[item.id] = Math.min(value, item.quantity);
                            } else {
                                delete participant.items[item.id];
                            }
                            updateHiddenInput();
                        });
                        cell.appendChild(input);
                        row.appendChild(cell);
                    });

                    itemBody.appendChild(row);
                });
            }

            function updateHiddenInput() {
                const payload = {
                    mode: state.mode,
                    participants: state.participants.map((participant, index) => {
                        const entry = {
                            id: participant.id,
                            name: participant.name?.trim() || null,
                            paymentMethod: participant.method || currentDefaultMethod
                        };

                        if (state.mode === 'percentage') {
                            entry.percentage = Number.isFinite(participant.percentage) ? participant.percentage : 0;
                        }
                        if (state.mode === 'full') {
                            entry.paysRemaining = index === 0;
                        }
                        if (state.mode === 'by-item') {
                            entry.paysRemaining = state.remainingPayerId ? participant.id === state.remainingPayerId : index === 0;
                            const items = Object.entries(participant.items || {})
                                .map(([itemId, quantity]) => ({
                                    cartItemId: Number(itemId),
                                    quantity: Number(quantity)
                                }))
                                .filter(it => Number.isFinite(it.quantity) && it.quantity > 0);
                            if (items.length) {
                                entry.items = items;
                            }
                        }
                        return entry;
                    })
                };

                splitInput.value = payload.participants.length > 0 ? JSON.stringify(payload) : '';
            }

            document.querySelectorAll('input[name="splitMode"]').forEach(radio => {
                radio.addEventListener('change', () => {
                    if (!radio.checked) {
                        return;
                    }
                    state.mode = radio.value;
                    ensureParticipants();
                    renderParticipants();
                });
            });

            document.querySelectorAll('input[name="paymentMethod"]').forEach(radio => {
                radio.addEventListener('change', () => {
                    const newDefault = getDefaultPaymentMethod();
                    state.participants.forEach(p => {
                        if (p.method === currentDefaultMethod) {
                            p.method = newDefault;
                        }
                    });
                    currentDefaultMethod = newDefault;
                    renderParticipants();
                });
            });

            addButton.addEventListener('click', () => addParticipant());

            form.addEventListener('submit', () => {
                updateHiddenInput();
                disableSubmitButton();
            });

            addParticipant();
        })();
    </script>
}

